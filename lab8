#mysort.h

// generic comparison function
typedef int (*CompareFunction) (void *a, void *b);
// Prototype for mysort()
void mysort( int n, int elementSize, void * array,
             int ascending, CompareFunction compFunc );


#----------------------
#mysort.c

#include "mysort.h"
#include <alloca.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>
//
// Sort an array of element of any type
// it uses "compFunc" to sort the elements.
// The elements are sorted such as:
//
// if ascending != 0
//   compFunc( array[ i ], array[ i+1 ] ) <= 0
// else
//   compFunc( array[ i ], array[ i+1 ] ) >= 0
//
// See test_sort to see how to use mysort.
//
void mysort( int n,                      // Number of elements
             int elementSize,            // Size of each element
             void * array,               // Pointer to an array
             int ascending,              // 0 -> descending; 1 -> ascending
             CompareFunction compFunc )  // Comparison function.
{
        // Add your code here
        void *temp = malloc(elementSize);
        for (int i = 0; i < n; i++){
                for(int j = 0; j < n-1; j++){
                        void *ej = (void*)((char *)array+(j*elementSize));
                        void *ek = (void*)((char *)array+((j+1)*elementSize));
                        if(ascending==0){
                                if(((*compFunc)(ej, ek))<=0){
                                        memcpy(temp, ej, elementSize);
                                        memcpy(ej, ek, elementSize);
                                        memcpy(ek, temp, elementSize);
                                }
                        }else if(ascending==1){
                                if(((*compFunc)(ej, ek))>=0){
                                        memcpy(temp, ej, elementSize);
                                        memcpy(ej, ek, elementSize);
                                        memcpy(ek, temp, elementSize);
                                }
                        }
                }
        }
        free(temp); 
}
